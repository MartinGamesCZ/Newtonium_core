// @bun
import{dlopen as _,FFIType as e}from"bun:ffi";function g(t){const{symbols:r}=_(t,{initialize:{args:[],returns:e.bool},run:{args:[],returns:e.void},create_window:{args:[e.cstring,e.cstring,e.cstring,e.function],returns:e.ptr},create_element:{args:[e.ptr,e.cstring,e.cstring,e.cstring],returns:e.void},append_child:{args:[e.ptr,e.cstring,e.ptr],returns:e.void},set_attribute:{args:[e.ptr,e.cstring,e.cstring,e.cstring,e.cstring],returns:e.void},add_event_listener:{args:[e.ptr,e.cstring,e.cstring,e.cstring],returns:e.void},remove_element:{args:[e.ptr,e.cstring],returns:e.void},set_styles:{args:[e.ptr,e.cstring,e.cstring],returns:e.void},get_attribute:{args:[e.ptr,e.cstring,e.cstring,e.cstring,e.cstring],returns:e.cstring}});return r}function n(t){return new Uint8Array([...new TextEncoder().encode(t),0])}import{randomUUID as w}from"crypto";function o(){return w().replaceAll("-","")}function d(t,r){return`
    .iid_${t} {
      ${Object.entries(r).filter(([,a])=>typeof a==="string").map(([a,s])=>`${a}: ${s}`).join("~ ")}
    }
  `.replace(/\n/g," ").replace(/[ ]{2,}/g," ").trim()}import{receiveMessageOnPort as u}from"worker_threads";class m{tagName;iid;_symbols=new Map;_window;constructor(t,r,i){this.tagName=t,this.iid=r,this._window=i}style={setProperty:(t,r)=>{this.style[t]=r;const i=d(this.iid,this.style);this._window.core.set_styles(this._window.getChannelPtr(),n(this.iid),n(i))}};appendChild(t){this._window.core.append_child(this._window.getChannelPtr(),n(this.iid),n(t.iid))}setAttribute(t,r){this._window.core.set_attribute(this._window.getChannelPtr(),n(this.iid),n(this.tagName),n(t),n(r))}getAttribute(t){const r=o(),i=new Int32Array(this._window.shared);if(this._window.core.get_attribute(this._window.getChannelPtr(),n(this.iid),n(this.tagName),n(t),n(r)),Atomics.wait(i,0,0,10)==="timed-out")console.log("Timed out");let s="";while(!0){const c=u(this._window.localPort);if(!c)break;s=c.message}return s}addEventListener(t,r){const i=o();return this._window.element_listeners[i]=r,this._symbols.set(t,[...this._symbols.get(t)||[],i]),this._window.core.add_event_listener(this._window.getChannelPtr(),n(this.iid),n(t),n(i)),i}removeEventListener(t){const r=this._symbols.get(t);if(!r)return;r.forEach((i)=>{this._window.element_listeners[i]=()=>{},delete this._window.element_listeners[i]})}remove(){this._window.core.remove_element(this._window.getChannelPtr(),n(this.iid)),this._window.document.deleteElement(this.iid)}}import f from"util";class l{_elements=new Map;_window;body;constructor(t){this._window=t,this.body=this._createElementWithId("view","body",!0)}createElement(t,r={}){const i=o();return this._createElementWithId(t,i,!1,r)}getElementById(t){return this._elements.get(t)?.element}_createElementWithId(t,r,i=!1,a={}){if(!i)this._window.core.create_element(this._window.getChannelPtr(),n(t),n(r),n(JSON.stringify(a)));const s=new m(t,r,this._window);return this._elements.set(r,{pointer:0,element:s}),s}deleteElement(t){this._elements.delete(t)}[f.inspect.custom](t,r){return`NewtoniumDocument {
  elements: ${this._elements.size}
}`}}import p from"path";import{MessageChannel as y,Worker as b}from"worker_threads";class h{worker_path=p.join(import.meta.dirname,"../workers/runner");lib_path=p.join(import.meta.dirname,"../lib/libnewtonium"+(process.platform=="win32"?".dll":".so"));_worker;_id;_channel_ptr=-1;core=g(this.lib_path);title;icon;document;localPort;shared;listeners={ready:[]};element_listeners={};constructor(t,r){const i=new y;this.localPort=i.port1,this.shared=new SharedArrayBuffer(4),this._worker=new b(this.worker_path,{workerData:{port:i.port2,shared:this.shared},transferList:[i.port2]}),this._id=o(),this.title=t,this.icon=r,this.document=new l(this)}run(){this._worker.postMessage({lib_path:this.lib_path,id:this._id,title:this.title,icon:this.icon}),this._worker.on("message",(t)=>{if(t.e==="close")this._worker.terminate();if(t.e==="ready")this._channel_ptr=t.channel_ptr,this._fireEvent("ready");if(t.e==="event"){const r=this.element_listeners[t.symbol_id.startsWith("!!")?t.iid.split("!!")[0]:t.symbol_id];if(!r)return;if(t.symbol_id.startsWith("!!")){r(t.iid.split("!!").slice(1).join("!!").split(";~;")[0]),delete this.element_listeners[t.symbol_id];return}r()}})}on(t,r){if(!this.listeners[t])this.listeners[t]=[];this.listeners[t].push(r)}_fireEvent(t,...r){for(let i of this.listeners[t])i(...r)}getChannelPtr(){if(this._channel_ptr===-1)throw new Error("Window is not ready yet");return this._channel_ptr}}export{h as Window,l as Document};

//# debugId=8C96583F6E31335964756E2164756E21
//# sourceMappingURL=data:application/json;base64,
