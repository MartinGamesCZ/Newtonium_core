// @bun
import{dlopen as g,FFIType as e}from"bun:ffi";function p(t){const{symbols:i}=g(t,{initialize:{args:[],returns:e.bool},run:{args:[],returns:e.void},create_window:{args:[e.cstring,e.cstring,e.cstring,e.function],returns:e.ptr},create_element:{args:[e.ptr,e.cstring,e.cstring,e.cstring],returns:e.void},append_child:{args:[e.ptr,e.cstring,e.ptr],returns:e.void},set_attribute:{args:[e.ptr,e.cstring,e.cstring,e.cstring,e.cstring],returns:e.void},add_event_listener:{args:[e.ptr,e.cstring,e.cstring,e.cstring],returns:e.void},remove_element:{args:[e.ptr,e.cstring],returns:e.void},set_styles:{args:[e.ptr,e.cstring,e.cstring],returns:e.void}});return i}function r(t){return new Uint8Array([...new TextEncoder().encode(t),0])}import{randomUUID as _}from"crypto";function s(){return _().replaceAll("-","")}function d(t,i){return`
    .iid_${t} {
      ${Object.entries(i).filter(([,o])=>typeof o==="string").map(([o,m])=>`${o}: ${m}`).join("; ")}
    }
  `.replace(/\n/g," ").replace(/[ ]{2,}/g," ").trim()}class l{tagName;iid;_symbols=new Map;_window;constructor(t,i,n){this.tagName=t,this.iid=i,this._window=n}style={setProperty:(t,i)=>{this.style[t]=i,this._window.core.set_styles(this._window.getChannelPtr(),r(this.iid),r(d(this.iid,this.style)))}};appendChild(t){this._window.core.append_child(this._window.getChannelPtr(),r(this.iid),r(t.iid))}setAttribute(t,i){this._window.core.set_attribute(this._window.getChannelPtr(),r(this.iid),r(this.tagName),r(t),r(i))}addEventListener(t,i){const n=s();return this._window.element_listeners[n]=i,this._symbols.set(t,[...this._symbols.get(t)||[],n]),this._window.core.add_event_listener(this._window.getChannelPtr(),r(this.iid),r(t),r(n)),n}removeEventListener(t){const i=this._symbols.get(t);if(!i)return;i.forEach((n)=>{this._window.element_listeners[n]=()=>{},delete this._window.element_listeners[n]})}remove(){this._window.core.remove_element(this._window.getChannelPtr(),r(this.iid)),this._window.document.deleteElement(this.iid)}}import w from"util";class a{_elements=new Map;_window;body;constructor(t){this._window=t,this.body=this._createElementWithId("view","body",!0)}createElement(t,i={}){const n=s();return this._createElementWithId(t,n,!1,i)}getElementById(t){return this._elements.get(t)?.element}_createElementWithId(t,i,n=!1,o={}){if(!n)this._window.core.create_element(this._window.getChannelPtr(),r(t),r(i),r(JSON.stringify(o)));const m=new l(t,i,this._window);return this._elements.set(i,{pointer:0,element:m}),m}deleteElement(t){this._elements.delete(t)}[w.inspect.custom](t,i){return`NewtoniumDocument {
  elements: ${this._elements.size}
}`}}import c from"path";class h{worker_path=c.join(import.meta.dirname,"../workers/runner");lib_path=c.join(import.meta.dirname,"../lib/libnewtonium"+(process.platform=="win32"?".dll":".so"));_worker;_id;_channel_ptr=-1;core=p(this.lib_path);title;icon;document;listeners={ready:[]};element_listeners={};constructor(t,i){this._worker=new Worker(this.worker_path),this._id=s(),this.title=t,this.icon=i,this.document=new a(this)}run(){this._worker.postMessage({lib_path:this.lib_path,id:this._id,title:this.title,icon:this.icon}),this._worker.onmessage=(t)=>{if(t.data.e==="close")this._worker.terminate();if(t.data.e==="ready")this._channel_ptr=t.data.channel_ptr,this._fireEvent("ready");if(t.data.e==="event"){const i=this.element_listeners[t.data.symbol_id];if(!i)return;i()}}}on(t,i){if(!this.listeners[t])this.listeners[t]=[];this.listeners[t].push(i)}_fireEvent(t,...i){for(let n of this.listeners[t])n(...i)}getChannelPtr(){if(this._channel_ptr===-1)throw new Error("Window is not ready yet");return this._channel_ptr}}export{h as Window,a as Document};

//# debugId=7BB8D2093B99447B64756E2164756E21
//# sourceMappingURL=data:application/json;base64,
