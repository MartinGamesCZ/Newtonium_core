// @bun
import{dlopen as g,FFIType as e}from"bun:ffi";function c(t){const{symbols:r}=g(t,{initialize:{args:[],returns:e.bool},run:{args:[],returns:e.void},create_window:{args:[e.cstring,e.cstring,e.cstring,e.function],returns:e.ptr},create_element:{args:[e.ptr,e.cstring,e.cstring,e.cstring],returns:e.void},append_child:{args:[e.ptr,e.cstring,e.ptr],returns:e.void},set_attribute:{args:[e.ptr,e.cstring,e.cstring,e.cstring,e.cstring],returns:e.void},add_event_listener:{args:[e.ptr,e.cstring,e.cstring,e.cstring],returns:e.void},remove_element:{args:[e.ptr,e.cstring],returns:e.void},set_styles:{args:[e.ptr,e.cstring,e.cstring],returns:e.void}});return r}function i(t){return new Uint8Array([...new TextEncoder().encode(t),0])}import{randomUUID as _}from"crypto";function s(){return _().replaceAll("-","")}function l(t,r){return`
    .iid_${t} {
      ${Object.entries(r).filter(([,o])=>typeof o==="string").map(([o,m])=>`${o}: ${m}`).join("; ")}
    }
  `.replace(/\n/g," ").replace(/[ ]{2,}/g," ").trim()}class d{tagName;iid;_window;constructor(t,r,n){this.tagName=t,this.iid=r,this._window=n}style={setProperty:(t,r)=>{this.style[t]=r,this._window.core.set_styles(this._window.getChannelPtr(),i(this.iid),i(l(this.iid,this.style)))}};appendChild(t){this._window.core.append_child(this._window.getChannelPtr(),i(this.iid),i(t.iid))}setAttribute(t,r){this._window.core.set_attribute(this._window.getChannelPtr(),i(this.iid),i(this.tagName),i(t),i(r))}addEventListener(t,r){const n=s();this._window.element_listeners[n]=r,this._window.core.add_event_listener(this._window.getChannelPtr(),i(this.iid),i(t),i(n))}remove(){this._window.core.remove_element(this._window.getChannelPtr(),i(this.iid)),this._window.document.deleteElement(this.iid)}}import w from"util";class a{_elements=new Map;_window;body;constructor(t){this._window=t,this.body=this._createElementWithId("view","body",!0)}createElement(t,r={}){const n=s();return this._createElementWithId(t,n,!1,r)}getElementById(t){return this._elements.get(t)?.element}_createElementWithId(t,r,n=!1,o={}){if(!n)this._window.core.create_element(this._window.getChannelPtr(),i(t),i(r),i(JSON.stringify(o)));const m=new d(t,r,this._window);return this._elements.set(r,{pointer:0,element:m}),m}deleteElement(t){this._elements.delete(t)}[w.inspect.custom](t,r){return`NewtoniumDocument {
  elements: ${this._elements.size}
}`}}import h from"path";class p{worker_path=h.join(import.meta.dirname,"../workers/runner");lib_path=h.join(import.meta.dirname,"../lib/libnewtonium"+(process.platform=="win32"?".dll":".so"));_worker;_id;_channel_ptr=-1;core=c(this.lib_path);title;icon;document;listeners={ready:[]};element_listeners={};constructor(t,r){this._worker=new Worker(this.worker_path),this._id=s(),this.title=t,this.icon=r,this.document=new a(this)}run(){this._worker.postMessage({lib_path:this.lib_path,id:this._id,title:this.title,icon:this.icon}),this._worker.onmessage=(t)=>{if(t.data.e==="close")this._worker.terminate();if(t.data.e==="ready")this._channel_ptr=t.data.channel_ptr,this._fireEvent("ready");if(t.data.e==="event"){const r=this.element_listeners[t.data.symbol_id];if(!r)return;r()}}}on(t,r){if(!this.listeners[t])this.listeners[t]=[];this.listeners[t].push(r)}_fireEvent(t,...r){for(let n of this.listeners[t])n(...r)}getChannelPtr(){if(this._channel_ptr===-1)throw new Error("Window is not ready yet");return this._channel_ptr}}export{p as Window,a as Document};

//# debugId=CB22BD24D6266BCE64756E2164756E21
//# sourceMappingURL=data:application/json;base64,
