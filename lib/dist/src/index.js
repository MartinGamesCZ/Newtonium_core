// @bun
import{dlopen as w,FFIType as e}from"bun:ffi";function g(t){const{symbols:r}=w(t,{initialize:{args:[],returns:e.bool},run:{args:[],returns:e.void},create_window:{args:[e.cstring,e.cstring,e.cstring,e.function],returns:e.ptr},create_element:{args:[e.ptr,e.cstring,e.cstring,e.cstring],returns:e.void},append_child:{args:[e.ptr,e.cstring,e.ptr],returns:e.void},set_attribute:{args:[e.ptr,e.cstring,e.cstring,e.cstring,e.cstring],returns:e.void},add_event_listener:{args:[e.ptr,e.cstring,e.cstring,e.cstring],returns:e.void},remove_element:{args:[e.ptr,e.cstring],returns:e.void},set_styles:{args:[e.ptr,e.cstring,e.cstring],returns:e.void},get_attribute:{args:[e.ptr,e.cstring,e.cstring,e.cstring,e.cstring],returns:e.cstring},insert_before:{args:[e.ptr,e.cstring,e.cstring,e.cstring],returns:e.void}});return r}function n(t){return new Uint8Array([...new TextEncoder().encode(t),0])}import{randomUUID as u}from"crypto";function a(){return u().replaceAll("-","")}function h(t,r){let i=`
    .iid_${t} {
      ${Object.entries(r).filter(([,s])=>typeof s==="string").map(([s,o])=>`${s}: ${o}`).join("~ ")}
    }
  `.replace(/\n/g," ").replace(/[ ]{2,}/g," ").trim();for(let[s,o]of Object.entries(r).filter(([l])=>l.startsWith(":")))i+=" "+`
      .iid_${t}${s} {
        ${Object.entries(o).map(([l,_])=>`${l}: ${_}`).join("~ ")}
        }
    `.replace(/\n/g," ").replace(/[ ]{2,}/g," ").trim();return i}import{receiveMessageOnPort as f}from"worker_threads";class d{tagName;iid;_symbols=new Map;_window;constructor(t,r,i){this.tagName=t,this.iid=r,this._window=i}style={setProperty:(t,r,i="_")=>{if(i=="_")this.style[t]=r;else{if(!this.style[i])this.style[i]={};this.style[i][t]=r}const s=h(this.iid,this.style);this._window.core.set_styles(this._window.getChannelPtr(),n(this.iid),n(s))}};appendChild(t){this._window.core.append_child(this._window.getChannelPtr(),n(this.iid),n(t.iid))}insertBefore(t,r){this._window.core.insert_before(this._window.getChannelPtr(),n(this.iid),n(t.iid),n(r.iid))}setAttribute(t,r){this._window.core.set_attribute(this._window.getChannelPtr(),n(this.iid),n(this.tagName),n(t),n(r))}getAttribute(t){const r=a(),i=new Int32Array(this._window.shared);if(this._window.core.get_attribute(this._window.getChannelPtr(),n(this.iid),n(this.tagName),n(t),n(r)),Atomics.wait(i,0,0,10)==="timed-out")console.log("Timed out");let o="";while(!0){const l=f(this._window.localPort);if(!l)break;o=l.message}return o}addEventListener(t,r){const i=a();return this._window.element_listeners[i]=r,this._symbols.set(t,[...this._symbols.get(t)||[],i]),this._window.core.add_event_listener(this._window.getChannelPtr(),n(this.iid),n(t),n(i)),i}removeEventListener(t){const r=this._symbols.get(t);if(!r)return;r.forEach((i)=>{this._window.element_listeners[i]=()=>{},delete this._window.element_listeners[i]})}remove(){this._window.core.remove_element(this._window.getChannelPtr(),n(this.iid)),this._window.document.deleteElement(this.iid)}}import y from"util";class m{_elements=new Map;_window;body;constructor(t){this._window=t,this.body=this._createElementWithId("view","body",!0)}createElement(t,r={}){const i=a();return this._createElementWithId(t,i,!1,r)}getElementById(t){return this._elements.get(t)?.element}_createElementWithId(t,r,i=!1,s={}){if(!i)this._window.core.create_element(this._window.getChannelPtr(),n(t),n(r),n(JSON.stringify(s)));const o=new d(t,r,this._window);return this._elements.set(r,{pointer:0,element:o}),o}deleteElement(t){this._elements.delete(t)}[y.inspect.custom](t,r){return`NewtoniumDocument {
  elements: ${this._elements.size}
}`}}import p from"path";import{MessageChannel as b,Worker as v}from"worker_threads";class c{worker_path=p.join(import.meta.dirname,"../workers/runner");lib_path=p.join(import.meta.dirname,"../lib/libnewtonium"+(process.platform=="win32"?".dll":".so"));_worker;_id;_channel_ptr=-1;core=g(this.lib_path);title;icon;document;localPort;shared;listeners={ready:[]};element_listeners={};constructor(t,r){const i=new b;this.localPort=i.port1,this.shared=new SharedArrayBuffer(4),this._worker=new v(this.worker_path,{workerData:{port:i.port2,shared:this.shared},transferList:[i.port2]}),this._id=a(),this.title=t,this.icon=r,this.document=new m(this)}run(){this._worker.postMessage({lib_path:this.lib_path,id:this._id,title:this.title,icon:this.icon}),this._worker.on("message",(t)=>{if(t.e==="close")this._worker.terminate();if(t.e==="ready")this._channel_ptr=t.channel_ptr,this._fireEvent("ready");if(t.e==="event"){const r=this.element_listeners[t.symbol_id.startsWith("!!")?t.iid.split("!!")[0]:t.symbol_id];if(!r)return;if(t.symbol_id.startsWith("!!")){r(t.iid.split("!!").slice(1).join("!!").split(";~;")[0]),delete this.element_listeners[t.symbol_id];return}r()}})}on(t,r){if(!this.listeners[t])this.listeners[t]=[];this.listeners[t].push(r)}_fireEvent(t,...r){for(let i of this.listeners[t])i(...r)}getChannelPtr(){if(this._channel_ptr===-1)throw new Error("Window is not ready yet");return this._channel_ptr}}export{c as Window,m as Document};

//# debugId=AB5EE7AD75E5149564756E2164756E21
//# sourceMappingURL=data:application/json;base64,
